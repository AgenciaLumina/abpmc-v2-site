import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

const missingPages = [
  {
    title: "Hist√≥rias e personagens",
    slug: "historias-e-personagens",
    html: "<h1>Hist√≥rias e personagens</h1>\n<p>Conte√∫do em desenvolvimento.</p>",
    excerpt: "Hist√≥rias e personagens da ABPMC"
  },
  {
    title: "Assuntos Profissionais, Legais e √âticos",
    slug: "assuntos-profissionais-legais-e-eticos",
    html: "<h1>Assuntos Profissionais, Legais e √âticos</h1>\n<p>Conte√∫do em desenvolvimento.</p>",
    excerpt: "Informa√ß√µes sobre assuntos profissionais, legais e √©ticos"
  },
  {
    title: "Desenvolvimento At√≠pico",
    slug: "desenvolvimento-atipico",
    html: "<h1>Desenvolvimento At√≠pico</h1>\n<p>Conte√∫do em desenvolvimento.</p>",
    excerpt: "Informa√ß√µes sobre desenvolvimento at√≠pico"
  },
  {
    title: "Imprensa",
    slug: "imprensa",
    html: "<h1>Imprensa</h1>\n<p>Conte√∫do em desenvolvimento.</p>",
    excerpt: "√Årea de imprensa da ABPMC"
  }
];

async function main() {
  console.log("üìÑ Criando p√°ginas faltantes...\n");
  console.log("=".repeat(60));

  let created = 0;
  let updated = 0;
  let skipped = 0;

  for (const page of missingPages) {
    try {
      const existing = await prisma.content.findUnique({
        where: { slug: page.slug }
      });

      if (existing) {
        // Atualizar se j√° existir
        await prisma.content.update({
          where: { slug: page.slug },
          data: {
            title: page.title,
            html: page.html,
            excerpt: page.excerpt,
            status: 'publish',
            type: 'PAGE',
            updatedAt: new Date()
          }
        });
        updated++;
        console.log(`‚úèÔ∏è  ATUALIZADA: ${page.title}`);
        console.log(`   Slug: /${page.slug}`);
      } else {
        // Criar nova
        await prisma.content.create({
          data: {
            type: 'PAGE',
            title: page.title,
            slug: page.slug,
            html: page.html,
            excerpt: page.excerpt,
            status: 'publish',
            createdAt: new Date(),
            publishedAt: new Date()
          }
        });
        created++;
        console.log(`‚úÖ CRIADA: ${page.title}`);
        console.log(`   Slug: /${page.slug}`);
      }
      console.log("");
    } catch (error) {
      skipped++;
      console.error(`‚ùå ERRO ao processar "${page.title}":`, error);
      console.log("");
    }
  }

  console.log("=".repeat(60));
  console.log("\nüìä RESUMO:");
  console.log(`   Criadas: ${created}`);
  console.log(`   Atualizadas: ${updated}`);
  console.log(`   Erros: ${skipped}`);
  console.log(`   Total processadas: ${created + updated}`);

  // Verificar total de p√°ginas
  const totalPages = await prisma.content.count({
    where: { type: 'PAGE' }
  });

  console.log(`\nüìÑ Total de p√°ginas no banco: ${totalPages}`);
  console.log("");

  await prisma.$disconnect();
}

main().catch((error) => {
  console.error("‚ùå Erro:", error);
  prisma.$disconnect();
  process.exit(1);
});
